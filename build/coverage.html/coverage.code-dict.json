{"/home/travis/build/npmtest/node-npmtest-node-mac/test.js":"/* istanbul instrument in package npmtest_node_mac */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mac/lib.npmtest_node_mac.js":"/* istanbul instrument in package npmtest_node_mac */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_mac = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_mac = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mac/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-mac && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_mac */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_mac\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_mac.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_mac.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_mac.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_mac.__dirname + '/lib.npmtest_node_mac.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mac/node_modules/node-mac/lib/node-mac.js":"/**\r\n * @class nodemac\r\n * This is a standalone module, originally designed for internal use in [NGN](http://github.com/thinkfirst/NGN).\r\n * However; it is capable of providing the same features for Node.JS scripts\r\n * independently of NGN.\r\n *\r\n * ### Getting node-mac\r\n *\r\n * `npm install -g node-mac`\r\n *\r\n * ### Using node-mac\r\n *\r\n * `var nm = require('node-mac');`\r\n *\r\n * @singleton\r\n * @author Corey Butler\r\n */\r\nif (require('os').platform().indexOf('darwin') < 0){\r\n  throw 'ngn-mac is only supported on Mac OSX.';\r\n}\r\n\r\n// Add daemon management capabilities\r\nmodule.exports.Service = require('./daemon');\r\n//module.exports.EventLogger = require('./eventlog');","/home/travis/build/npmtest/node-npmtest-node-mac/node_modules/node-mac/lib/daemon.js":"/**\n * @class nodemac.Daemon\n * Manage node.js scripts as native Mac daemons.\n *     var Service = require('node-mac').Service;\n *\n *     // Create a new service object\n *     var svc = new Service({\n *       name:'Hello World',\n *       description: 'The nodejs.org example web server.',\n *       script: '/path/to/helloworld.js')\n *     });\n *\n *     // Listen for the \"install\" event, which indicates the\n *     // process is available as a service.\n *     svc.on('install',function(){\n *       svc.start();\n *     });\n *\n *     svc.install();\n * @author Corey Butler\n */\nvar plist = require('plist'),\n\tfs = require('fs'),\n\tp = require('path'),\n\texec = require('child_process').exec,\n\twrapper = p.resolve(p.join(__dirname,'./wrapper.js'));\n\nvar daemon = function(config) {\n\n\tconfig.runAsAgent = config.hasOwnProperty('runAsAgent') ? config.runAsAgent: false;\n\n\tObject.defineProperties(this,{\n\n    /**\n     * @cfg {String} name\n     * The descriptive name of the process, i.e. `My Process`.\n     */\n    _name: {\n      enumerable: false,\n      writable: true,\n      configurable: false,\n      value: config.name || null\n    },\n\n\t\t/**\n\t\t * @property {String} name\n\t\t * The name of the process.\n\t\t */\n    name: {\n      enumerable: true,\n      get: function(){return this._name;},\n      set: function(value){this._name = value;}\n    },\n\n    label: {\n    \tenumerable: false,\n    \tget: function(){\n    \t\treturn this.name.replace(/[^a-zA-Z]+/gi,'').toLowerCase()\n    \t}\n    },\n\n    plist: {\n    \tenumerable: false,\n    \tget: function(){\n    \t\treturn p.join(this.root,this.label+'.plist');\n    \t}\n    },\n\n    outlog: {\n    \tenumerable: false,\n    \tget: function(){\n    \t\treturn p.join(this.logpath,this.label+'.log');\n    \t}\n    },\n\n    errlog: {\n    \tenumerable: false,\n    \tget: function(){\n\t\t\t\treturn p.join(this.logpath,this.label+'_error.log');\n    \t}\n    },\n\n    /**\n     * @property {Boolean} exists\n     * Indicates that the service exists.\n     * @readonly\n     */\n    exists: {\n     \tenumerable: true,\n     \tget: function(){\n     \t\treturn fs.existsSync(this.plist);\n     \t}\n    },\n\n    /**\n     * @property {String} id\n     * The ID for the process.\n     * @readonly\n     */\n    id: {\n      enumerable: true,\n      get: function(){\n        return this.name.replace(/[^\\w]/gi,'').toLowerCase();\n      }\n    },\n\n    /**\n     * @cfg {String} [description='']\n     * Description of the service.\n     */\n    description: {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: config.description || ''\n    },\n\n    /**\n     * @cfg {String} [cwd]\n     * The absolute path of the current working directory. Defaults to the base directory of #script.\n     */\n    cwd: {\n      enumerable: false,\n      writable: true,\n      configurable: false,\n      value: config.cwd || p.dirname( ( ( this.script === undefined ) || ( this.script === null ) ) ? '' : this.script.toString() )\n    },\n\n    /**\n\t   * @cfg {Array|Object} [env]\n\t   * An optional array or object used to pass environment variables to the node.js script.\n\t   * You can do this by setting environment variables in the service config, as shown below:\n\t   *\n\t   *     var svc = new Service({\n\t   *      name:'Hello World',\n\t   *      description: 'The nodejs.org example web server.',\n\t   *      script: '/path/to/helloworld.js',\n\t   *      env: {\n\t   *        name: \"NODE_ENV\",\n\t   *        value: \"production\"\n\t   *      }\n\t   *     });\n\t   *\n\t   * You can also supply an array to set multiple environment variables:\n\t   *\n\t   *     var svc = new Service({\n\t   *      name:'Hello World',\n\t   *      description: 'The nodejs.org example web server.',\n\t   *      script: '/path/to/helloworld.js',\n\t   *      env: [{\n\t   *        name: \"HOME\",\n\t   *        value: process.env[\"USERPROFILE\"] // Access the user home directory\n\t   *      },{\n\t   *        name: \"NODE_ENV\",\n\t   *        value: \"production\"\n\t   *      }]\n\t   *     });\n\t   */\n\t  _ev: {\n\t  \tenumerable: false,\n\t  \twritable: true,\n\t  \tconfigurable: false,\n\t  \tvalue: config.env || []\n\t  },\n\n    EnvironmentVariables: {\n    \tenumerable: false,\n    \tget: function(){\n    \t\tvar ev = [], tmp = {};\n    \t\tif (Object.prototype.toString.call(this._ev) === '[object Array]'){\n    \t\t\tthis._ev.forEach(function(item){\n    \t\t\t\ttmp = {};\n    \t\t\t\ttmp[item.name] = item.value;\n    \t\t\t\tev.push(tmp);\n    \t\t\t});\n    \t\t} else {\n    \t\t\ttmp[this._ev.name] = this._ev.value;\n    \t\t\tev.push(tmp);\n    \t\t}\n    \t\treturn ev;\n    \t}\n    },\n\n    /**\n     * @cfg {String} script\n     * The absolute path of the script to launch as a service.\n     * @required\n     */\n    script: {\n      enumerable: true,\n      writable: true,\n      configurable: false,\n      value: config.script !== undefined ? require('path').resolve(config.script) : null\n    },\n\n\t\troot: {\n\t\t\tenumerable: false,\n\t\t\twritable: true,\n\t\t\tconfigurable: false,\n\t\t\tvalue: config.runAsAgent ? '/Library/LaunchAgents' : '/Library/LaunchDaemons'\n\t\t},\n\n\t\t/**\n\t\t * @cfg {String} [logpath=/Library/Logs/node-scripts]\n\t\t * The root directory where the log will be stored.\n\t\t */\n\t\tlogpath: {\n\t\t\tenumerable: true,\n\t\t\twritable: true,\n\t\t\tconfigurable: false,\n\t\t\tvalue: config.logpath || '/Library/Logs/'+(this.name || config.name || 'node-scripts')\n\t\t},\n\n\t\t/**\n     * @cfg {Number} [maxRetries=null]\n     * The maximum number of restart attempts to make before the service is considered non-responsive/faulty.\n     * Ignored by default.\n     */\n    maxRetries: {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: config.maxRetries || null\n    },\n\n    /**\n     * @cfg {Number} [maxRestarts=3]\n     * The maximum number of restarts within a 60 second period before haulting the process.\n     * This cannot be _disabled_, but it can be rendered ineffective by setting a value of `0`.\n     */\n    maxRestarts: {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: config.maxRestarts || 3\n    },\n\n    /**\n     * @cfg {Boolean} [abortOnError=false]\n     * Setting this to `true` will force the process to exit if it encounters an error that stops the node.js script from running.\n     * This does not mean the process will stop if the script throws an error. It will only abort if the\n     * script throws an error causing the process to exit (i.e. `process.exit(1)`).\n     */\n    abortOnError: {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: config.abortOnError instanceof Boolean ? config.abortOnError : false\n    },\n\n    /**\n     * @cfg {Number} [wait=1]\n     * The initial number of seconds to wait before attempting a restart (after the script stops).\n     */\n    wait: {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: config.wait || 1\n    },\n\n    /**\n     * @cfg {Number} [grow=.25]\n     * A number between 0-1 representing the percentage growth rate for the #wait interval.\n     * Setting this to anything other than `0` allows the process to increase it's wait period\n     * on every restart attempt. If a process dies fatally, this will prevent the server from\n     * restarting the process too rapidly (and too strenuously).\n     */\n    grow: {\n      enumerable: true,\n      writable: false,\n      configurable: false,\n      value: config.grow || .25\n    },\n\n\t\t/**\n\t\t * @method install\n\t\t * Install the script as a background process/daemon.\n\t\t * @param {Function} [callback]\n\t\t */\n\t\tinstall: {\n\t\t\tenumerable: true,\n\t\t\twritable: true,\n\t\t\tconfigurable: false,\n\t\t\tvalue: function(callback){\n\n\t\t\t\tvar me = this;\n\n\t\t\t\tif (!fs.existsSync(this.logpath)){\n\t\t\t\t\tfs.mkdirSync(this.logpath);\n\t\t\t\t}\n\n\t\t\t\t// Create the log file if it doesn't exist.\n\t\t\t\tfs.exists(this.outlog,function(exists){\n\t\t\t\t\tif (!exists){\n\t\t\t\t\t\tfs.appendFileSync(me.outlog,'# '+me.name);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Create the error file if it doesn't exist.\n\t\t\t\tfs.exists(this.errlog,function(exists){\n\t\t\t\t\tif (!exists){\n\t\t\t\t\t\tfs.appendFileSync(me.errlog,'# '+me.name+' Errors');\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Create the plist file if it doesn't exist.\n\t\t\t\tfs.exists(this.plist,function(exists){\n\t\t\t\t\tif (!exists){\n\n\t\t\t\t\t\t// Make sure a node.js file is specified.\n\t\t\t\t\t\tif (!me.script){\n\t\t\t\t\t\t\tconsole.log(me.script);\n\t\t\t\t\t\t\tthrow new Error('No file specified. Cannot start.');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Build the plist file\n\t\t\t\t\t\tvar args = [\n\t\t\t\t\t\t\tprocess.execPath,'--harmony',wrapper,\n\t\t\t\t\t\t\t'-f',me.script,\n\t\t\t\t\t\t\t'-l',me.outlog,\n\t\t\t\t\t\t\t'-e',me.errlog,\n\t\t\t\t\t\t\t'-t',me.name,\n\t\t\t\t\t\t\t'-g',me.grow.toString(),\n\t\t\t\t\t\t\t'-w',me.wait.toString(),\n\t\t\t\t\t\t\t'-r',me.maxRestarts.toString(),\n\t\t\t\t\t\t\t'-a',(me.abortOnError==true?'y':'n')\n\t\t\t\t\t\t];\n\t\t\t\t\t\tif (me.maxRetries!==null){\n\t\t\t\t\t\t\targs.push('-m');\n\t\t\t\t\t\t\targs.push(me.maxRetries.toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Add environment variables\n\t\t\t\t\t\tfor (var i=0;i<me.EnvironmentVariables.length;i++){\n\t\t\t\t\t\t\targs.push('--env');\n\t\t\t\t\t\t\tfor (var el in me.EnvironmentVariables[i]){\n\t\t\t\t\t\t\t\targs.push(el+'='+me.EnvironmentVariables[i][el]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar tpl = {\n\t\t\t\t\t\t\tLabel: me.label,\n\t\t\t\t\t\t\tProgramArguments: args,\n\t\t\t\t\t\t\tRunAtLoad: true,\n\t\t\t\t\t\t\t//StartInterval: 3600,\n\t\t\t\t\t\t\tKeepAlive: false,\n\t\t\t\t\t\t\tWorkingDirectory: me.cwd,\n\t\t\t\t\t\t\tStandardOutPath: me.outlog,\n\t\t\t\t\t\t\tStandardErrorPath: me.errlog\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tvar data = plist.build(tpl).toString();\n\n\t\t\t\t\t\tif (!fs.existsSync(require('path').dirname(me.plist))){\n\t\t\t\t\t\t\tfs.mkdirSync(require('path').dirname(me.plist));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Write the plist file to disk.\n\t\t\t\t\t\tfs.writeFile(me.plist,data,function(){\n\t\t\t\t\t\t\t// Load the deamon\n\t\t\t\t\t\t\t//exec('launchctl load '+me.plist,{},function(){\n\t\t\t\t\t\t\t\tme.emit('install');\n\t\t\t\t\t\t\t\tcallback && callback();\n\t\t\t\t\t\t\t//});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tme.emit('alreadyinstalled');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @method uninstall\n\t\t * Uninstall an existing background process/daemon.\n\t\t * @param {Function} [callback]\n\t\t * Executed when the process is uninstalled.\n\t\t */\n\t\tuninstall: {\n\t\t\tenumerable: true,\n\t\t\twritable: true,\n\t\t\tconfigurable: false,\n\t\t\tvalue: function(callback){\n\n\t\t\t\tvar me = this;\n\t\t\t\tthis.stop(function(){\n\t\t\t\t\texec('rm '+me.plist,{},function(){\n\t\t\t\t\t\tvar dne = !me.exists;\n\t\t\t\t\t\tif (fs.existsSync(me.outlog)){\n\t\t\t\t\t\t\tfs.unlinkSync(me.outlog);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (fs.existsSync(me.errlog)){\n\t\t\t\t\t\t\tfs.unlinkSync(me.errlog);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (fs.existsSync(me.logpath)){\n\t\t\t\t\t\t\tif (me.logpath !== '/Library/Logs'){\n\t\t\t\t\t\t\t\tvar dir = fs.readdirSync(me.logpath);\n\t\t\t\t\t\t\t\tif (dir.length == 0){\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tfs.unlinkSync(me.logpath);\n\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\texec('rm -r '+me.logpath.replace(/\\s/gi,'\\\\ '),function(err){\n\t\t\t\t\t\t\t\t\t\t\tif (err){\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(err);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (dne) {\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @event doesnotexist\n\t\t\t\t\t\t\t * Fired when an attempt to uninstall the service fails because it does not exist.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tme.emit('doesnotexist');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tme.emit('uninstall');\n\t\t\t\t\t\tcallback && callback();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @method start\n\t\t * Start and/or create a daemon.\n\t\t * @param {Function} [callback]\n\t\t */\n\t\tstart:{\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t\tconfigurable: false,\n\t\t\tvalue: function(callback){\n\t\t\t\tvar me = this;\n\t\t\t\texec('launchctl load '+this.plist,{},function(){\n\t\t\t\t\tfs.appendFileSync(me.outlog,'\\n'+new Date().toLocaleString()+' - '+me.name+' Started');\n\t\t\t\t\tme.emit('start');\n\t\t\t\t\tcallback && callback();\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @method stop\n\t\t * Stop the process if it is currently running.\n\t \t * @param {Function} [callback]\n\t\t */\n\t\tstop: {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t\tconfigurable: false,\n\t\t\tvalue: function(callback){\n\t\t\t\tvar me = this;\n\t\t\t\texec('launchctl unload '+this.plist,{},function(){\n\t\t\t\t\tfs.appendFileSync(me.outlog,'\\n'+new Date().toLocaleString()+' - '+me.name+' Stopped');\n\t\t\t\t\tme.emit('stop');\n\t\t\t\t\tcallback && callback();\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t \t * @method restart\n\t \t * @param {Function} [callback]\n\t \t */\n\t \trestart: {\n\t\t \tenumerable: true,\n\t\t \twritable: true,\n\t\t \tconfigurable: false,\n\t\t \tvalue: function(callback){\n\t\t \t\tvar me = this;\n\t\t \t\tthis.stop(function(){\n\t\t \t\t\tme.start(callback);\n\t\t \t\t});\n\t\t \t}\n\t \t}\n\t});\n};\n\nvar util = require('util'),\n  EventEmitter = require('events').EventEmitter;\n\n// Inherit Events\nutil.inherits(daemon,EventEmitter);\n\nmodule.exports = daemon;\n","/home/travis/build/npmtest/node-npmtest-node-mac/node_modules/node-mac/lib/wrapper.js":"// Handle input parameters\nvar optimist = require('optimist'),\n    fs = require('fs'),\n    max = 60,\n    p = require('path'),\n    argv = optimist\n      .demand('file')\n      .alias('f','file')\n      .describe('file','The absolute path of the script to be run as a process.')\n      .check(function(argv){\n        require('fs').existsSync(p.resolve(argv.f),function(exists){\n          return exists;\n        });\n      })\n      .demand('log')\n      .alias('l','log')\n      .describe('log','The absolute path of the log file.')\n      .demand('errorlog')\n      .alias('e','errorlog')\n      .describe('errorlog','The absolute path of the error log file.')\n      .demand('title')\n      .alias('t','title')\n      .describe('title','The name/title of the process.')\n      .default('maxretries',-1)\n      .alias('m','maxretries')\n      .describe('maxretries','The maximim number of times the process will be auto-restarted.')\n      .default('maxrestarts',5)\n      .alias('r','maxrestarts')\n      .describe('maxrestarts','The maximim number of times the process should be restarted within a '+max+' second period shutting down.')\n      .default('wait',1)\n      .alias('w','wait')\n      .describe('wait','The number of seconds between each restart attempt.')\n      .check(function(argv){\n        return argv.w >= 0;\n      })\n      .default('grow',.25)\n      .alias('g','grow')\n      .describe('grow','A percentage growth rate at which the wait time is increased.')\n      .check(function(argv){\n        return (argv.g >= 0 && argv.g <= 1);\n      })\n      .default('abortonerror','no')\n      .alias('a','abortonerror')\n      .describe('abortonerror','Do not attempt to restart the process if it fails with an error,')\n      .check(function(argv){\n        return ['y','n','yes','no'].indexOf(argv.a.trim().toLowerCase()) >= 0;\n      })\n      .argv,\n    //log = new Logger(argv.e == undefined ? argv.l : {source:argv.l,eventlog:argv.e}),\n    fork = require('child_process').fork,\n    script = p.resolve(argv.f),\n    wait = argv.w*1000,\n    grow = argv.g+1,\n    attempts = 0,\n    startTime = null,\n    starts = 0,\n    child = null;\n\nprocess.title = argv.t || 'Node.JS Script';\n\n// Log Formatting - Standard Output Hook\nconsole.log = function (data) {\n  fs.appendFileSync(argv.log,'\\n'+new Date().toLocaleString()+' - '+data);\n};\n\nconsole.error = function (data) {\n  fs.appendFileSync(argv.errorlog,'\\n'+new Date().toLocaleString()+' - '+data);\n};\n\nconsole.warn = function (data) {\n  fs.appendFileSync(argv.log,'\\n'+new Date().toLocaleString()+' - WARNING: '+data);\n};\n\nconsole.log('');\n\nif (argv.env){\n  if (Object.prototype.toString.call(argv.env) === '[object Array]'){\n    for(var i=0;i<argv.env.length;i++){\n      process.env[argv.env[i].split('=')[0]] = argv.env[i].split('=')[1];\n    }\n  } else {\n    process.env[argv.env.split('=')[0]] = argv.env.split('=')[1];\n  }\n}\n\nif (typeof argv.m === 'string'){\n  argv.m = parseInt(argv.m);\n}\n\n// Set the absolute path of the file\nargv.f = p.resolve(argv.f);\n\n// Hack to force the wrapper process to stay open by launching a ghost socket server\nvar server = require('net').createServer().listen(0, '127.0.0.1');\n\n/**\n * @method monitor\n * Monitor the process to make sure it is running\n */\nvar monitor = function(){\n  if(!child.pid){\n\n    // If the number of periodic starts exceeds the max, kill the process\n    if (starts >= argv.r){\n      if (new Date().getTime()-(max*1000) <= startTime.getTime()){\n        console.error('Too many restarts within the last '+max+' seconds. Please check the script.');\n        process.exit();\n      }\n    }\n\n    setTimeout(function(){\n      wait = wait * grow;\n      attempts += 1;\n      if (attempts > argv.m && argv.m >= 0){\n        console.error('Too many restarts. '+argv.f+' will not be restarted because the maximum number of total restarts has been exceeded.');\n        process.exit();\n      } else {\n        launch();\n      }\n    },wait);\n  } else {\n    attempts = 0;\n    wait = argv.w * 1000;\n  }\n};\n\n\n/**\n * @method launch\n * A method to start a process.\n */\nvar launch = function(){\n  //log.info('Starting '+argv.f);\n\n  // Set the start time if it's null\n  if (startTime == null) {\n    startTime = startTime || new Date();\n    setTimeout(function(){\n      startTime = null;\n      starts = 0;\n    },(max*1000)+1);\n  }\n  starts += 1;\n\n  // Fork the child process\n  child = fork(script,{env:process.env});\n\n  // When the child dies, attempt to restart based on configuration\n  child.on('exit',function(code){\n    console.warn(argv.f+' stopped running.');\n\n    // If an error is thrown and the process is configured to exit, then kill the parent.\n    if (code !== 0 && argv.a == \"yes\"){\n      console.error(argv.f+' exited with error code '+code);\n      process.exit();\n      server.unref();\n    }\n\n    delete child.pid;\n\n    // Monitor the process\n    monitor();\n  });\n};\n\nprocess.on('exit',function(){\n  if (child.pid){\n    process.kill(child.pid)\n  };\n  process.exit();\n});\n\n// Launch the process\nlaunch();\n"}